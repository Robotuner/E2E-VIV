@page
@model ElectionWebsite.Pages.Requirements.RegistrationModel
@{
}

<div class="text-left">
    <h1 class="display-4">Making Ballot available to voting app</h1>
    <p>
        Internet voting starts with letting the voting app know how to get the ballot.  
        It is the responsibility of each State to develop the ballot. Typically in an in-person voting scenario, 
        the ballot is printed and handed to the registered voter at the polling location.  In the mail-in voting 
        scenario, the ballot is mailed to registered voters.  In the internet voting scenario, a ballot is not mailed 
        to the registered voter, a QR Code is mailed (delivered somehow) that enables the voting app 
        to retrieve it.  There are multiple options:
        <ul>
            <li>Mail each registered voter a QR Code</li>
            <li>Require registered voters to access the Registration Website to obtain a QR Code</li>
            <li>Combination of both.</li>
        </ul>
    </p>
    <p>
        The QR Code contains the following information:
        <ul>
            <li>Election Id</li>
            <li>Year of Birth</li>
            <li>Encrypted Ballot Id</li>
            <li>Voting Server URL</li>
            <li>App Download URL?</li>
        </ul>
        The App download URL is used to direct the app to the correct download location from which to get the voting app. 
        This prevents registered users from using a fraudulent app to cast votes.  (not used in testing, this might be
        something that is required in production environment).
    </p>
    <p>
        Since the E2E-VIV process calls for each State to host their own election server, the app needs to know
        where the server is.  This isn't implemented in the development, the URL is hard coded into the development build.
    </p>
    <p>
        The Election Id is used to tell the voting app what election ballot to download.  The voting app will scan the code, 
        retrieve the ballot and allow the registered voter to complete the ballot. Implicit in this process is that 
        only registered voters will be able to complete the ballot.  In reality, if the scan codes are mailed, then
        they can be harvested.  This would allow a fraudulent user to retrieve a ballot of a registered voter.  They will 
        run into the problem of the encrypted ballot Id.  It is encrypted in a way that only the registered voter
        will know how to decrypt (theoretically rendering harvesting moot).  Something like their SSN must be known 
        in order to decrypt the ballot id.  If the encrypted ballot cannot be decrypted, the completed ballot cannot be submitted.
    </p>
    <p>
        As an added feature, the request by the voting app to download the ballot could include the device id that is making the 
        request. This device id can be saved and use to verify that the device did indeed request a ballot. This is useful as a 
        defense against a direct attack strategy in which the <strong>registration database is fully compromised</strong> and the attack 
        bypassed the voting app and attempts to directly inject signatures into the vote counting database. Since the  Signature 
        includes a device id, direct injection would result in a signature with a device Id that did not request a ballot. This is
        not fool proof, the injection attack could also send a notification of pending submittal and supply the device id.
    </p>
    <p>
        The encrypted Ballot Id is used to link a ballot to a unique registered voter. The ballot id is not simply
        created and assigned, it is saved to a database table so that the audit process can verify ballots that are
        received were legitimate and not simply manufactured (as is possible with mail-n voting).  
        This can be done in several ways:
        <ol>
            <li>
                The State can choose to assign a unique ballot id to each registered user. This is the simplist
                option and allows inclusion of the encrypted ballot id in the QR Code.
            </li>
            <li>  
                The State can allocate a unique ballot id to registered voters as they are requested. To prevent a registered
                voter from requesting multiple ballots, the registered vote record will simply record that a ballot id has
                already been created for the user. There is not an option to create a replacement unique ballot id for a registered user.
                This is not as problematic as it sounds, the voting app can be designed to ask for the unique ballot id as the completed 
                ballot is being submitted, so that retrieval and submittal are essentially the same action.
            </li>
            <li>
                The third option is a combination of both. The State creates two tables in addition to the Registration
                database. The first table is a table that saves allocated ballot ids. The second table contains the registered
                voter and the encrypted ballot id. This allows the state to reissue the encrypted ballot id to the registered 
                user. It allows the state to send all registered voters a QR code without a direct link back to the
                registered voter.
            </li>
        </ol>        
    </p>
    <p>
        The requirements to get the ballot to the registered voter is fairly straight forward.  It comes down to delivery
        of the QR code.  Because the ballot ids are allocated or linked to registered users, there needs to be an API 
        that verifies if a ballot id is legitimate.
    </p>

</div>